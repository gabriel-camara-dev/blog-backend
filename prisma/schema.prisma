// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  publicId       String    @unique @default(uuid()) @map("public_id")
  name           String
  email          String    @unique
  loginAttempts  Int       @default(0) @map("login_attempts")
  lastLogin      DateTime? @map("last_login")
  passwordDigest String    @map("password_digest")
  role           USER_ROLE @default(NORMAL_USER)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  AuthenticationAudit AuthenticationAudit[]

  @@index([id])
  @@map("users")
}

enum USER_ROLE {
  ADMIN
  NORMAL_USER
}

model AuthenticationAudit {
  id         Int                   @id @default(autoincrement())
  ipAddress  String?               @map("ip_address")
  remotePort String?               @map("remote_port")
  browser    String?
  status     AUTHENTICATION_STATUS
  userId     Int?                  @map("user_id")
  user       User?                 @relation(fields: [userId], references: [id], onDelete: NoAction)
  createdAt  DateTime              @default(now()) @map("created_at")

  @@map("authentication_audit")
}

enum AUTHENTICATION_STATUS {
  SUCCESS
  USER_NOT_EXISTS
  INCORRECT_PASSWORD
  BLOCKED
}
